syntax = "proto3";
package stafihub.stafihub.rvalidator;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "rvalidator/rvalidator.proto";

option go_package = "github.com/stafihub/stafihub/x/rvalidator/types";

// Msg defines the Msg service.
service Msg {
      rpc SetRValidatorIndicator(MsgSetRValidatorIndicator) returns (MsgSetRValidatorIndicatorResponse);
  rpc Onboard(MsgOnboard) returns (MsgOnboardResponse);
  rpc VoteStatusProposal(MsgVoteStatusProposal) returns (MsgVoteStatusProposalResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgSetRValidatorIndicator {
  string creator = 1;
  string denom = 2;
  string commission = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  uint32 uptime = 4;
  string locked = 5 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
}

message MsgSetRValidatorIndicatorResponse {
}

message MsgOnboard {
  string creator = 1;
  string denom = 2;
  string address = 3;
  string locked = 4 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
}

message MsgOnboardResponse {
}

message MsgVoteStatusProposal {
  string creator = 1;
  uint64 proposal_id = 2;
  string denom = 3;
  repeated string addresses = 4 [(gogoproto.nullable) = false];
  RValidatorStatus sourceStatus = 5;
  RValidatorStatus destStatus = 6;
}

message MsgVoteStatusProposalResponse {
}

// this line is used by starport scaffolding # proto/tx/message